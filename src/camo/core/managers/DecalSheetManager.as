/**  * <p>Original Author:  jessefreeman</p> * <p>Class File: DecalSheet.as</p> *  * <p>Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions:</p> *  * <p>The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software.</p> *  * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE.</p> *  * <p>Licensed under The MIT License</p> * <p>Redistributions of files must retain the above copyright notice.</p> * * <p>Revisions<br/>  * 	2.0  Initial version Jan 7, 2009</p> * */package camo.core.managers {	import camo.core.decal.Decal;	import camo.core.decal.DecalSheet;	import camo.core.events.LoaderManagerEvent;	import camo.core.managers.BitmapLoaderManager;	import camo.core.utils.TypeHelperUtil;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.EventDispatcher;	import flash.geom.Rectangle;	import flash.utils.Dictionary;	/**	 * @author jessefreeman	 */	public class DecalSheetManager extends EventDispatcher	{		protected var sheetCollection : Dictionary = new Dictionary( true );		protected var decalLookup : Dictionary = new Dictionary( true );		protected var loadManager : BitmapLoaderManager = new BitmapLoaderManager( );		protected var sourceSheetLookup : Array = new Array( );		protected var sheetSrcBaseUrl : String;		protected var sheetSourceLookup : Array = new Array( );		public function DecalSheetManager( ) : void		{			loadManager.addEventListener( LoaderManagerEvent.LOADED, onLoaderComplete );			loadManager.addEventListener( LoaderManagerEvent.PRELOAD_NEXT, redispatchEvent );			loadManager.addEventListener( LoaderManagerEvent.PRELOAD_DONE, redispatchEvent );		}		protected function onLoaderComplete(event : LoaderManagerEvent) : void		{			var file : String = event.data.fileName;						if(sourceSheetLookup[file])			{				var bmd : Bitmap = Bitmap( loadManager.loadedReference[file] );				var sheet : DecalSheet = sheetCollection[sourceSheetLookup[ file]];				sheet.bitmapData = bmd.bitmapData.clone( );			}		}		protected function redispatchEvent(event : LoaderManagerEvent) : void		{			event.stopImmediatePropagation( );			dispatchEvent( new LoaderManagerEvent( event.type, event.data, event.bubbles, event.cancelable ) );		}		public function parseXML( xml : XML ) : void		{			sheetSrcBaseUrl = xml.sheets.@baseURL;							parseSheetXMLList( xml.sheets.* );			parseDecalList( xml.decals.* );		}		/**		 * @private		 * @param list		 * 		 */				protected function parseSheetXMLList(list : XMLList) : void		{			var preloadList : Array = new Array( );						var sheet : XML;			for each(sheet in list)			{				var tempW : Number = sheet.hasOwnProperty( "@w" ) ? Number( sheet.@w ) : 1;				var tempH : Number = sheet.hasOwnProperty( "@h" ) ? Number( sheet.@h ) : 1;				var preload : Boolean = sheet.hasOwnProperty( "@preload" ) ? TypeHelperUtil.stringToBoolean( sheet.@preload ) : false;								newSheet( sheet.@name, tempW, tempH, sheetSrcBaseUrl + sheet.@src, preload );				if(preload)						preloadList.push( sheetSrcBaseUrl + sheet.@src );			}						if(preloadList.length == 0)			{				dispatchEvent( new LoaderManagerEvent( LoaderManagerEvent.PRELOAD_DONE, null, true, true ) );				}			else			{				loadManager.addToQueue( preloadList );			}		}		/**		 * @private		 * @param list		 * 		 */				protected function parseDecalList(list : XMLList) : void		{			var decal : XML;			for each(decal in list)			{				var tempX : Number = decal.hasOwnProperty( "@x" ) ? Number( decal.@x ) : 0;				var tempY : Number = decal.hasOwnProperty( "@y" ) ? Number( decal.@y ) : 0;				var tempW : Number = decal.hasOwnProperty( "@w" ) ? Number( decal.@w ) : 1;				var tempH : Number = decal.hasOwnProperty( "@h" ) ? Number( decal.@h ) : 1;								newDecal( decal.@name, decal.@sheet, tempX, tempY, tempW, tempH );			}		}		public function newSheet(name : String, width : Number, height : Number, sourceURL : String, preload : Boolean, defaultColor : uint = 0x000000, pixelSnapping : String = "auto", smoothing : Boolean = false) : void		{			var bmd : BitmapData = new BitmapData( width, height, false, defaultColor );			var sheet : DecalSheet = new DecalSheet( bmd, pixelSnapping, smoothing );						sheetCollection[name] = sheet;			sourceSheetLookup[sourceURL] = name;			sheetSourceLookup[name] = sourceURL;			//			if(preload)//				loadManager.load( sourceURL );		}		public function getSheet(sheetName : String) : DecalSheet		{			// Check to make sure the sheet has loaded bitmapdata			var source : String = sheetSourceLookup[sheetName];						if(! loadManager.loadedReference[source])			{				loadManager.load( source );			}			return sheetCollection[ sheetName ]; 		}		public function deleteSheet(sheetName : String) : Boolean		{			var sheet : DecalSheet = sheetCollection[sheetName];			var success : Boolean = sheet.clear( );						if(success)			{				var source : String = sheetSourceLookup[sheetName];				delete sheetCollection[sheetName];				delete sourceSheetLookup[source];				delete loadManager.loadedReference[source];				delete sheetSourceLookup[sheetName];			}			else			{				success = false;			}						return success;		}		public function newDecal(name : String, sheetName : String, x : Number, y : Number, width : Number, height : Number, scale9Rect : Rectangle = null) : void		{			var sheet : DecalSheet = sheetCollection[sheetName];			if(sheet)			{				sheet.registerDecal( name, new Rectangle( x, y, width, height ), scale9Rect );				decalLookup[ name ] = sheetName;			}		}		/**		 * 		 * @param decalName		 */		public function getDecal(decalName : String, pixelSnapping : String = "auto", smoothing : Boolean = false) : Decal		{			try			{				var sheet : String = decalLookup[decalName];							return DecalSheet( sheetCollection[sheet] ).getDecal( decalName, pixelSnapping, smoothing );			}			catch (error : Error)			{				trace( "Unable to get decal", decalName, " - Error:", error );			}			return null;			}		/**		 * 		 * 		 */		public function deleteDecal(decalName : String) : Boolean		{			var sheetName : String = decalLookup[ decalName];			var sheet : DecalSheet = sheetCollection[sheetName];			var success : Boolean = sheet.deleteDecal( decalName );						if(success)				delete decalLookup[decalName];			else				success = false;						return success;		}	}}